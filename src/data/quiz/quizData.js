const quizData = [
  {
    id: 1,
    category: 'React',
    question: 'React의 핵심 개념 중 하나로, UI를 독립적이고 재사용 가능한 조각으로 만드는 것을 무엇이라 하나요?',
    options: ['Props', 'State', 'Component', 'Hook'],
    answer: 2,
  },
  {
    id: 2,
    category: 'React',
    question: 'React에서 상태 관리를 위해 사용되는 훅은 무엇인가요?',
    options: ['useEffect', 'useState', 'useRef', 'useCallback'],
    answer: 1,
  },
  {
    id: 3,
    category: 'React',
    question: 'React의 JSX 문법에서 여러 요소를 반환할 때 반드시 감싸야 하는 부모 요소는?',
    options: ['<div>', '<span>', '<section>', '<Fragment> 또는 <> </>'],
    answer: 3,
  },
  {
    id: 4,
    category: 'React',
    question: '다음 중 React Hook이 아닌 것은?',
    options: ['useEffect', 'useReducer', 'useClass', 'useMemo'],
    answer: 2,
  },
  {
    id: 5,
    category: 'React',
    question: '컴포넌트에 전달되는 데이터를 무엇이라 부르나요?',
    options: ['State', 'Props', 'Event', 'Variable'],
    answer: 1,
  },
  {
    id: 6,
    category: 'Next.js',
    question: 'Next.js에서 페이지 기반 라우팅은 어느 폴더 내에 파일을 생성하여 이루어지나요?',
    options: ['/components', '/pages', '/styles', '/public'],
    answer: 1,
  },
  {
    id: 7,
    category: 'Next.js',
    question: 'Next.js의 정적 생성(Static Generation)을 할 때 데이터를 가져오기 위해 사용하는 함수는?',
    options: ['getServerSideProps', 'getStaticProps', 'getInitialProps', 'useEffect'],
    answer: 1,
  },
  {
    id: 8,
    category: 'Next.js',
    question: 'Next.js에서 SSR(Server Side Rendering)을 하기 위해 사용하는 함수는?',
    options: ['getServerSideProps', 'getStaticPaths', 'useState', 'getStaticProps'],
    answer: 0,
  },
  {
    id: 9,
    category: 'Next.js',
    question: 'Next.js 프로젝트의 루트에서 글로벌 스타일을 설정할 때 주로 사용하는 파일은?',
    options: ['index.js', '_app.js', '_document.js', 'style.css'],
    answer: 1,
  },
  {
    id: 10,
    category: 'Next.js',
    question: 'Next.js에서 정적 경로를 사전에 정의하기 위해 사용하는 함수는?',
    options: ['getStaticPaths', 'getStaticProps', 'getServerSideProps', 'getPaths'],
    answer: 0,
  },
  {
    id: 11,
    category: 'React',
    question: 'React에서 컴포넌트가 화면에 처음 나타날 때 실행되는 훅은?',
    options: ['useState', 'useRef', 'useEffect', 'useMemo'],
    answer: 2,
  },
  {
    id: 12,
    category: 'React',
    question: 'React의 Props에 대한 설명으로 올바른 것은?',
    options: [
      '컴포넌트 내부에서 직접 수정할 수 있다.',
      '상위 컴포넌트가 하위 컴포넌트에 전달하는 읽기 전용 데이터이다.',
      '렌더링과 무관하다.',
      '값을 변경하면 화면이 갱신되지 않는다.',
    ],
    answer: 1,
  },
  {
    id: 13,
    category: 'Next.js',
    question: 'Next.js에서 이미지 최적화를 위해 사용하는 기본 컴포넌트는?',
    options: ['<Image>', '<img>', '<Picture>', '<OptimizedImage>'],
    answer: 0,
  },
  {
    id: 14,
    category: 'React',
    question: 'React의 Virtual DOM의 역할은?',
    options: [
      '사용자의 입력을 관리한다.',
      '변경 사항을 실제 DOM에 직접 반영한다.',
      '변경 사항을 메모리상에서 먼저 계산하고, 실제 DOM과 비교하여 최소한의 변경만 적용한다.',
      '서버 데이터를 관리한다.',
    ],
    answer: 2,
  },
  {
    id: 15,
    category: 'Next.js',
    question: 'Next.js에서 API 라우트를 만들 때 파일을 생성하는 폴더는?',
    options: ['/pages', '/components', '/pages/api', '/api'],
    answer: 2,
  },
  {
    id: 16,
    category: 'React',
    question: 'React에서 컴포넌트 간에 직접 데이터를 전달하지 않고 상태를 공유하기 위해 사용하는 기술은?',
    options: ['useState', 'Context API', 'useEffect', 'useReducer'],
    answer: 1,
  },
  {
    id: 17,
    category: 'React',
    question: '상태 값이 자주 변경되는 경우, 불필요한 렌더링을 방지하는 훅은?',
    options: ['useCallback', 'useEffect', 'useState', 'useRef'],
    answer: 0,
  },
  {
    id: 18,
    category: 'Next.js',
    question: 'Next.js에서 동적 라우트를 만들 때 사용하는 파일 이름 규칙은?',
    options: ['[id].js', '{id}.js', '<id>.js', '(id).js'],
    answer: 0,
  },
  {
    id: 19,
    category: 'React',
    question: 'React 앱에서 특정 DOM 요소에 직접 접근할 때 사용하는 훅은?',
    options: ['useState', 'useRef', 'useEffect', 'useMemo'],
    answer: 1,
  },
  {
    id: 20,
    category: 'React',
    question: 'React에서 useEffect의 의존성 배열([])에 아무 값도 넣지 않으면 언제 실행되나요?',
    options: ['렌더링 때마다', '초기 렌더링 한 번만', '변수 변경 시', '컴포넌트 언마운트 시'],
    answer: 1,
  },
];

export default quizData;
